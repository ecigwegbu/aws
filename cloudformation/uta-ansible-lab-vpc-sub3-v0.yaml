---
# This AWS CloudFormation Template creates a stack that builds the
# Unix Training Academy Ansible Lab (see Class Materials)
#
# The Ansible Lab includes a RHEL9 Ansible Control Node and 4 RHEL9 Managed Nodes.
# Each node has a user named ansible
# The password of the ansible user and the ssh private key for the ansible 
# user on all the nodes are retrieved from the Amazon Secrets Manager.
# In Secrets Manager, the password is stored as a key-value pair, while the
# priv. key must be base64-encoded ($ sudo base64 -w 0 private key) b4 storing as a Secrets Manager 'plain text'.
# The ansible user can ssh from any node to any other node without a password
# (so, strictly speaking, the ansible user's password is not really required for Ansible tasks)
# 
# The template utilises two parameters, with customisable default values:
# 1 - the name of the key pair (which must exist prior to launching this template)
# 2 - the name of the IAM Instance Profile to associate with the EC2's. 
#     This role must include the 'secretsmanager:GetSecretValue' policy.
# The lab utilises a non-default VPC (UTAAnsibleVPC), with one public subnet
# (for the Control Node) and, for simplicity, one private subnet (for the four managed nodes). The private subnet utilises a NAT Gateway.
#
# To avoid unnecessary cloud computing charges (especially due to the NAT Gateway),  tear down the stack after lab work.
#
# (c) 2024. Unix Training Academy. Author: Elias Igwegbu
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "UTA Ansible Lab version CloudFormation 1.0"
Metadata:
  Author: "Elias C. Igwegbu, B.ENG, MBA, MNSE, SWE-ALX/Holberton, RHCSA, AWS-CCP"
Parameters:
  KeyPairName:
    Description: 'Name of an existing EC2 Key Pair to allow SSH access to the instance'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'UTAbastionkeys'  # Change as desired to customise template
    ConstraintDescription: 'must be the name of an existing EC2 KeyPair.'
  IAMInstanceProfileName:
    Description: 'Name of the IAM Instance Profile to associate with the EC2 instance'
    Type: String
    Default: 'uta-ansible-lab'  # Change as desired to customise this template
    ConstraintDescription: 'must be the name of an existing IAM Instance Profile that includes secretsmanager:GetSecretValue'
Resources: 
  UTAAnsibleVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: UTAAnsibleVPC
# BEGIN IMPORT for PUBLIC SUBNET *****************
  # Public Subnets A, B, C
  UTApublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: UTApublicA
# Create Internet Gateway
  UTAAnsibleVPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: UTAAnsibleVPCIGW
# Attach IGW to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      InternetGatewayId:
        Ref: UTAAnsibleVPCIGW
# Public Route Table
  UTApublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: UTAAnsibleVPC
      Tags:
      - Key: Name
        Value: UTApublicRT
# Public Route for IPv4
  UTApublicRTroute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway  # Must attach IGW to VPC first 
    Properties:
      RouteTableId:
        Ref: UTApublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: UTAAnsibleVPCIGW
# Public Route for IPv6
  UTApublicRTroute6:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: UTApublicRT
      DestinationIpv6CidrBlock: "::/0"
      GatewayId:
        Ref: UTAAnsibleVPCIGW
# Associate the public Route Table with public Subnets A, B, C
  UTASubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UTApublicA
      RouteTableId:
        Ref: UTApublicRT
# END IMPORT for PUBLIC SUBNET *****************
# BEGIN IMPORT *********************
  # Define Private Subnets A, B, C
  UTAprivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: UTAprivateA
  UTAprivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: UTAprivateB
  UTAprivateC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: "us-east-1c"
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: UTAprivateC
# Handle Private Subnets
# Availability Zone us-east-1a
# Create NAT Gateway (first create the EIP)
# # Create EIP; note that the domain is vpc
  NATgatewayAEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc
        Tags:
        - Key: Name
          Value: "NATgatewayA EIP"
# # Create NAT gateway (default is public) and reference the EIP above
  NATgatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATgatewayAEIP.AllocationId
        SubnetId: !Ref UTApublicA
        Tags:
        - Key: Name
          Value: NATgatewayA
# Create private route table, associate it with the private and database
# subnet, then add a route to to the Internet to the NAT gateway
# # Create private route table
  UTAprivateART:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: UTAAnsibleVPC
      Tags:
      - Key: Name
        Value: UTAprivateART
# # Associate the private Route Table with private subnet A and database A
  UTASubnetRouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UTAprivateA
      RouteTableId:
        Ref: UTAprivateART
# # Add route to Internet to the NAT Gateway for IPv4
  UTAprivateARTroute:
    Type: AWS::EC2::Route
    DependsOn: NATgatewayA  # Must create NAT Gateway in VPC/pub subnet first 
    Properties:
      RouteTableId:
        Ref: UTAprivateART
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATgatewayA
# END IMPORT **************************
# BEGIN A AND B PRIVATE IMPORT
# Create private route table, associate it with the private 
# subnet, then add a route to to the Internet to the NAT gateway
# # Create private route table
  UTAprivateBRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: UTAAnsibleVPC
      Tags:
      - Key: Name
        Value: UTAprivateBRT
# # Associate the private Route Table with private subnet B and database B
  UTASubnetRouteTableAssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UTAprivateB
      RouteTableId:
        Ref: UTAprivateBRT
# # Add route to Internet to the NAT Gateway for IPv4
  UTAprivateBRTroute:
    Type: AWS::EC2::Route
    DependsOn: NATgatewayA  # Must create NAT Gateway in VPC/pub subnet first 
    Properties:
      RouteTableId:
        Ref: UTAprivateBRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATgatewayA
# # # #
# Availability Zone us-east-1c
# Create private route table, associate it with the private
# subnet, then add a route to to the Internet to the NAT gateway
# # Create private route table
  UTAprivateCRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: UTAAnsibleVPC
      Tags:
      - Key: Name
        Value: UTAprivateCRT
# # Associate the private Route Table with private subnet C and database C
  UTASubnetRouteTableAssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UTAprivateC
      RouteTableId:
        Ref: UTAprivateCRT
# # Add route to Internet to the NAT Gateway for IPv4
  UTAprivateCRTroute:
    Type: AWS::EC2::Route
    DependsOn: NATgatewayA  # Must create NAT Gateway in VPC/pub subnet first 
    Properties:
      RouteTableId:
        Ref: UTAprivateCRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATgatewayA
# END  A AND B PRIVATE IMPORT
# Define a security group that will be used for all nodes
  UTAansibleSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "UTAansibleSG"
      VpcId: !Ref UTAAnsibleVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: UTAansibleSG
# Define the Control Node in the default VPC
  AnsibleControlNode: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0fe630eb857a6ec83"
      InstanceType: "t2.micro"
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref UTAansibleSG
      SubnetId: !Ref UTApublicA
      IamInstanceProfile: !Ref IAMInstanceProfileName
      Tags:
        - Key: Name
          Value: "AnsibleControlNode"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install AWS CLI
          sudo dnf update -y
          sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
            -o "awscliv2.zip"
          sudo dnf install -y unzip
          sudo unzip awscliv2.zip
          sudo ./aws/install
          sudo export PATH=$PATH:/usr/local/bin
          aws --version
          # Install jq for parsing JSON data (if required)
          sudo dnf install -y jq
          # Install, Start and Enable Amazon SSM Agent (if using RHEL AMI)
          if [[ -n $(grep -i 'Red Hat Enterprise Linux' /etc/os-release) ]]; then
          dnf install -y https://s3.us-east-1.amazonaws.com/amazon-ssm-us-east-1/latest/linux_amd64/amazon-ssm-agent.rpm
          systemctl enable --now amazon-ssm-agent
          fi
          # create user ansible and enable ssh authentication with the existing key-pair
          if [[ -z $(getent passwd ansible) ]]; then
            sudo useradd ansible
            sudo mkdir /home/ansible/.ssh
            sudo cp /home/ec2-user/.ssh/authorized_keys\
              /home/ansible/.ssh/authorized_keys
            sudo chown -R ansible:ansible /home/ansible/.ssh
            sudo chmod 700 /home/ansible/.ssh
            sudo chmod 600 /home/ansible/.ssh/authorized_keys
            sudo echo "ansible ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/ansible
            # Retrieve the Ansible user's password from Amazon Secrets Manager
            # and assign it to the ansible user
            AnsibleUserPassword=$(aws secretsmanager get-secret-value \
              --secret-id ansible_user_password --query 'SecretString' \
              --output text | jq -r .ansible_user_password)
            sudo echo $AnsibleUserPassword | sudo passwd ansible --stdin
            # Copy the private key from Amazon Secrets Manager to ~ansible/id_rsa
            AnsiblePrivateKey=$(aws secretsmanager get-secret-value --secret-id \
            ansible_private_key --query 'SecretString' --output text)
            sudo echo $AnsiblePrivateKey | base64 --decode > /home/ansible/.ssh/id_rsa
            sudo chmod 600 /home/ansible/.ssh/id_rsa
            sudo chown -R ansible:ansible /home/ansible/.ssh
          fi
# Define 4 Managed Nodes using Launch Templates
  AnsibleManagedNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: AnsibleManagedNodeTemplate # Optional
      LaunchTemplateData:
        ImageId: "ami-0fe630eb857a6ec83"
        InstanceType: "t2.micro"
        # SubnetId: !Ref UTAprivateA # Reference to the private subnet
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Name: !Ref IAMInstanceProfileName
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false # Do not assign public IP
            Groups:
              - !GetAtt UTAansibleSG.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Install AWS CLI
            sudo dnf update -y
            sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
              -o "awscliv2.zip"
            sudo dnf install -y unzip
            sudo unzip awscliv2.zip
            sudo ./aws/install
            sudo export PATH=$PATH:/usr/local/bin
            aws --version
            # Install jq for parsing JSON data (if required)
            sudo dnf install -y jq
            # Install, Start and Enable Amazon SSM Agent (if using RHEL AMI)
            if [[ -n $(grep -i 'Red Hat Enterprise Linux' /etc/os-release) ]]; then
            dnf install -y https://s3.us-east-1.amazonaws.com/amazon-ssm-us-east-1/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable --now amazon-ssm-agent
            fi
            # create user ansible and enable ssh authentication with the existing key-pair
            if [[ -z $(getent passwd ansible) ]]; then
              sudo useradd ansible
              sudo mkdir /home/ansible/.ssh
              sudo cp /home/ec2-user/.ssh/authorized_keys\
                /home/ansible/.ssh/authorized_keys
              sudo chown -R ansible:ansible /home/ansible/.ssh
              sudo chmod 700 /home/ansible/.ssh
              sudo chmod 600 /home/ansible/.ssh/authorized_keys
              sudo echo "ansible ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/ansible
              # Retrieve the Ansible user's password from Amazon Secrets Manager
              # and assign it to the ansible user
              AnsibleUserPassword=$(aws secretsmanager get-secret-value \
                --secret-id ansible_user_password --query 'SecretString' \
                --output text | jq -r .ansible_user_password)
              sudo echo $AnsibleUserPassword | sudo passwd ansible --stdin
              # Copy the private key from Amazon Secrets Manager to ~ansible/id_rsa
              AnsiblePrivateKey=$(aws secretsmanager get-secret-value --secret-id \
              ansible_private_key --query 'SecretString' --output text)
              sudo echo $AnsiblePrivateKey | base64 --decode > /home/ansible/.ssh/id_rsa              
              sudo chmod 600 /home/ansible/.ssh/id_rsa
              sudo chown -R ansible:ansible /home/ansible/.ssh
            fi
  AnsibleManagedNodeAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '4'
      MaxSize: '4'
      DesiredCapacity: '4'
      LaunchTemplate:
        LaunchTemplateId: !Ref AnsibleManagedNodeLaunchTemplate
        Version: !GetAtt AnsibleManagedNodeLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - Ref: UTAprivateA
        # - subnet-03198101485465b7a
      Tags:
        - Key: Name
          Value: AnsibleManagedNode
          PropagateAtLaunch: true
