---
# This AWS CloudFormation Template creates a stack that builds the
# Unix Training Academy Ansible Lab (see Class Materials)
#
# The Ansible Lab includes a RHEL9 Ansible Control Node and a user-specied number
# of RHEL9 Managed Nodes. It also installs EPEL and Ansible in the Control Node,
# configures a basic ansible.cfg file  and builds an initial inventory list 
# in the /etc/ansible directory.
#
# Each node has a user named ansible
# The password of the ansible user and the ssh private key for the ansible 
# user on all the nodes are retrieved from the Amazon Secrets Manager.
# In Secrets Manager, the password is stored as a 'Key/value' pair, while the
# priv. key must be base64-encoded ($ sudo base64 -w 0 private key) b4 storing
# as a Secrets Manager 'Plaintext'.
# The ansible user can ssh from any node to any other node without a password
# (so, strictly speaking, the ansible user's password is not really required for Ansible tasks)
# 
# The template utilises three parameters, with default values; change the
# defaults in this template as desired:
# 1 - the name of the key pair (which must exist prior to launching this
#     template). The matching private pem key must have been base-64 encoded
#      as stated above and stored in Secrets Manager
# 2 - the name of the IAM Instance Profile to associate with the EC2s. 
#     This role must include the 'secretsmanager:GetSecretValue' policy.
#     As an example, create an IAM role named 'uta-ansible-lab' (the name
#     used by default in this template) that includes the following 
#     AWS Managed policies: AmazonEC2FullAccess,
#     AmazonSSMManagedInstanceCore and SecretsManagerReadWrite.
# 3 - The Number of Managed Nodes
#
# The UTA Ansible Lab utilises a non-default VPC (UTAAnsibleVPC), with one
# public subnet (for the Control Node) and three private subnets (for the
# managed nodes). The private subnets utilise one NAT Gateway.
#
# To avoid unnecessary cloud computing charges (especially due to the
# NAT Gateway),  tear down the stack after the lab work is over.
#
# (c) 2024. Unix Training Academy. Author: Elias Igwegbu
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "UTA Ansible Lab CloudFormation version 2.0"
Metadata:
  Author: "Elias C. Igwegbu, B.ENG, MBA, MNSE, SWE-ALX/Holberton, RHCSA, AWS-CCP"
Parameters:
  KeyPairName:
    Description: 'Name of an existing EC2 Key Pair to allow SSH access to the instance'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'UTAbastionkeys'  # Change as desired to customise template
    ConstraintDescription: 'must be the name of an existing EC2 KeyPair.'
  IAMInstanceProfileName:
    Description: 'Name of the IAM Instance Profile to associate with the EC2 instance'
    Type: String
    Default: 'uta-ansible-lab'  # Change as desired to customise this template
    ConstraintDescription: 'must be the name of an existing IAM Instance Profile that includes secretsmanager:GetSecretValue'
  NumberOfManagedNodes:
    Description: 'The number of managed nodes'
    Type: Number
    Default: 4  # Change this default as desired
Resources: 
# Create VPC
  UTAAnsibleVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: UTAAnsibleVPC
# Create public subnet - just one, for the managed node
  UTApublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: UTApublicA
# Create Internet Gateway for the VPC
  UTAAnsibleVPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: UTAAnsibleVPCIGW
# Attach IGW to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      InternetGatewayId:
        Ref: UTAAnsibleVPCIGW
# Create a Route Table that will be used for the public subnet
  UTApublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: UTAAnsibleVPC
      Tags:
      - Key: Name
        Value: UTApublicRT
# Add a Route (IPv4) to the route table for the public subnet
  UTApublicRTroute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway  # Must attach IGW to VPC first 
    Properties:
      RouteTableId:
        Ref: UTApublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: UTAAnsibleVPCIGW
# Add a Route (IPv6) to the route table for the public subnet
  UTApublicRTroute6:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: UTApublicRT
      DestinationIpv6CidrBlock: "::/0"
      GatewayId:
        Ref: UTAAnsibleVPCIGW
# Associate the public Route Table with the one public subnet
  UTASubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UTApublicA
      RouteTableId:
        Ref: UTApublicRT
# Define Private Subnets A, B, C, for managed nodes
  UTAprivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: UTAprivateA
  UTAprivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: UTAprivateB
  UTAprivateC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: UTAAnsibleVPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: "us-east-1c"
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: UTAprivateC
# Create and configure one NAT Gateway
# For simplicity, this will be used for all the private subnets
# First create an EIP; note that the domain is vpc
  NATgatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc
        Tags:
        - Key: Name
          Value: "NATgateway EIP"
# Now  create the NAT gateway (default is public) and reference the EIP above
  NATgateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATgatewayEIP.AllocationId
        SubnetId: !Ref UTApublicA  # The one NAT GW is located in UTApublicA
        Tags:
        - Key: Name
          Value: NATgateway
# Create a private route table (one will do for the three private subnets since they share the same NAT Gateway),
# then add a route to to the Internet, through the one NAT gateway,
# and associate it with the three private subnets (requires 3 associations!)
# First create the route table
  UTAprivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: UTAAnsibleVPC
      Tags:
      - Key: Name
        Value: UTAprivateRT
# # Add route to Internet through the NAT Gateway for IPv4
  UTAprivateRTroute:
    Type: AWS::EC2::Route
    DependsOn: NATgateway  # Must create NAT Gateway in VPC/pub subnet first 
    Properties:
      RouteTableId:
        Ref: UTAprivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATgateway
# Associate the private Route Table with the three private subnets
  UTASubnetRouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UTAprivateA
      RouteTableId:
        Ref: UTAprivateRT
  UTASubnetRouteTableAssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UTAprivateB
      RouteTableId:
        Ref: UTAprivateRT
  UTASubnetRouteTableAssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: UTAprivateC
      RouteTableId:
        Ref: UTAprivateRT
# Define a security group that will be used for all nodes
  UTAansibleSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "UTAansibleSG"
      VpcId: !Ref UTAAnsibleVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: UTAansibleSG
# Define the Control Node in the public subnet
  AnsibleControlNode: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0fe630eb857a6ec83"
      InstanceType: "t2.small"
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref UTAansibleSG
      SubnetId: !Ref UTApublicA
      IamInstanceProfile: !Ref IAMInstanceProfileName
      Tags:
        - Key: Name
          Value: "workstation"
        - Key: AliasName
          Value: "workstation"
        - Key: Type
          Value: "AnsibleNode"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install AWS CLI
          sudo dnf update -y
          sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
          -o "awscliv2.zip"
          sudo dnf install -y unzip
          sudo unzip awscliv2.zip
          sudo ./aws/install
          sudo export PATH=$PATH:/usr/local/bin
          aws --version
          # Install jq for parsing JSON data (if required)
          sudo dnf install -y jq
          # Install, Start and Enable Amazon SSM Agent (if using RHEL AMI)
          if [[ -n $(grep -i 'Red Hat Enterprise Linux' /etc/os-release) ]]; then
          dnf install -y https://s3.us-east-1.amazonaws.com/amazon-ssm-us-east-1/latest/linux_amd64/amazon-ssm-agent.rpm
          systemctl enable --now amazon-ssm-agent
          fi
          # create user ansible and enable ssh authentication with the existing key-pair
          if [[ -z $(getent passwd ansible) ]]; then
          sudo useradd ansible
          sudo mkdir /home/ansible/.ssh
          sudo cp /home/ec2-user/.ssh/authorized_keys \
          /home/ansible/.ssh/authorized_keys
          # logger "Authorized_keys workstation - actual"
          sudo chown -R ansible:ansible /home/ansible/.ssh
          sudo chmod 700 /home/ansible/.ssh
          sudo chmod 600 /home/ansible/.ssh/authorized_keys
          sudo echo "ansible ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/ansible
          # Retrieve the Ansible user's password from Amazon Secrets Manager
          # and assign it to the ansible user
          AnsibleUserPassword=$(aws secretsmanager get-secret-value \
          --secret-id ansible_user_password --query 'SecretString' \
          --output text | jq -r .ansible_user_password)
          sudo echo $AnsibleUserPassword | sudo passwd ansible --stdin
          # Copy the private key from Amazon Secrets Manager to ~ansible/id_rsa
          AnsiblePrivateKey=$(aws secretsmanager get-secret-value --secret-id \
          ansible_private_key --query 'SecretString' --output text)
          sudo echo $AnsiblePrivateKey | base64 --decode > /home/ansible/.ssh/id_rsa
          sudo chmod 600 /home/ansible/.ssh/id_rsa
          sudo chown -R ansible:ansible /home/ansible/.ssh
          # install ansible, but first EPEL
          sudo dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
          sudo dnf install -y ansible
          # create the .config directory
          mkdir -p /home/ansible/.config/ansible-lab
          chown -R ansible:ansible /home/ansible/.config
          chmod -R 755 /home/ansible/.config
          # Store the setup script for initialising the lab
          cat <<'EOF' > /home/ansible/.config/ansible-lab/setup
          #!/bin/bash
          echo -n "Configuring the Ansible servers..."
          # create the file
          aws ec2 describe-instances --filters "Name=tag:Type,Values=AnsibleNode" \
          "Name=instance-state-name,Values=running" \
          --query 'Reservations[*].Instances[*].[PrivateIpAddress, Tags[?Key==`AliasName`].Value | [0]]' \
          --output text > server_list.txt
          # The file you want to process
          file="server_list.txt"
          # Letter initialization; the letter will be incremented for subsequent servers
          letter=a
          echo -n > hosts-file
          # Read each line
          while IFS= read -r line; do
          # Check if line contains 'workstation'
          if echo "$line" | grep -q 'workstation'; then
          # extract the line item to the hosts-file
          echo "$line workstation.lab.example.com" | sed "s/\s\+/    /g" >> hosts-file
          # Re-label the Instance Name Tags on the console. First, retrieve the ip address
          myip=$(echo $line | cut -d' ' -f 1)
          # retrieve the instance id based on the private ip address:
          instance_id=$(aws ec2 describe-instances \
          --filters "Name=private-ip-address,Values=$myip" \
          --query 'Reservations[*].Instances[*].InstanceId' \
          --output text)
          # set the instance Name tag based on the just retrieved instance id
          aws ec2 create-tags --resources "$instance_id" --tags Key=Name,Value=workstation
          elif echo "$line" | grep -q 'server'; then
          # Append the current letter and print the line
          echo "$line$letter server$letter.lab.example.com" | sed "s/\s\+/    /g" >> hosts-file
          # Re-label the Instance Name Tags on the console. First, retrieve the ip address
          myip=$(echo $line | cut -d' ' -f 1)
          # retrieve the instance id based on the private ip address:
          instance_id=$(aws ec2 describe-instances \
          --filters "Name=private-ip-address,Values=$myip" \
          --query 'Reservations[*].Instances[*].InstanceId' \
          --output text)
          # set the instance Name tag based on the just retrieved instance id
          aws ec2 create-tags --resources "$instance_id" --tags Key=Name,Value=server"$letter"
          # Increment the letter
          letter=$(echo "$letter" | tr "a-yz" "b-za")
          fi
          done < "$file"
          # now login to each server and set hostname and update /etc/hosts:
          file="hosts-file"
          # Open the file with file descriptor 3
          exec 3< "$file"
          # mkdir -p /home/ansible/.config/ansible-lab  # we will track processed nodes in here
          # Read each line using file descriptor 3
          while IFS= read -r line <&3; do
          # get the ip address and hostname
          myip=$(echo "$line" | cut -d' ' -f1)
          myhostname=$(echo "$line" | cut -d' ' -f9)
          # Only process the server once
          if [[ ! -f /home/ansible/.config/ansible-lab/.processed_$myip ]]; then
          # echo "processing $myhostname..."
          # Set the hostname
          ssh -n -q -o StrictHostKeyChecking=no "$myip" sudo hostnamectl set-hostname "$myhostname"
          # copy the hosts-file created above to /etc/hosts, via /tmp; cleanup after the job
          scp -q -o StrictHostKeyChecking=no hosts-file "$myip":/tmp/hosts-file.123456 >> /tmp/scp_log_123456.txt 2>&1
          ssh -n -q -o StrictHostKeyChecking=no "$myip" 'cat /tmp/hosts-file.123456 | sudo tee -a /etc/hosts' >> /tmp/ssh_log_123456.txt 2>&1
          ssh -n -q -o StrictHostKeyChecking=no "$myip" 'rm -f /tmp/hosts-file.123456'
          touch "/home/ansible/.config/ansible-lab/.processed_$myip"
          fi
          echo -n \.
          done 
          # Close the file descriptor
          exec 3<&-
          # cleanup
          rm -f server_list.txt
          rm -f hosts-file
          ssh-keyscan -f /etc/ansible/inventory 2> /dev/null | tee -a /home/ansible/.ssh/known_hosts > /dev/null  # debug
          echo
          echo "Done."
          bash
          EOF
          chown ansible:ansible /home/ansible/.config/ansible-lab/setup
          chmod u+x /home/ansible/.config/ansible-lab/setup
          cat <<'EOF' >>/home/ansible/.bash_profile
          if [[ ! -f /home/ansible/.config/ansible-lab/.lab-setup-done ]]; then
          . /home/ansible/.config/ansible-lab/setup
          touch /home/ansible/.config/ansible-lab/.lab-setup-done
          chown ansible:ansible /home/ansible/.config/ansible-lab/.lab-setup-done
          fi
          EOF
          chown ansible:ansible /home/ansible/.bash_profile
          # cat <<'EOF' >/home/ansible/inventory
          sudo tee /etc/ansible/inventory > /dev/null <<'EOF'
          workstation.lab.example.com
          servera.lab.example.com
          serverb.lab.example.com
          serverc.lab.example.com
          serverd.lab.example.com
          [webservers]
          servera.lab.example.com
          serverb.lab.example.com
          [app]
          serverc.lab.example.com
          [db]
          serverd.lab.example.com
          [usa]
          servera.lab.example.com
          serverb.lab.example.com
          serverc.lab.example.com
          [canada]
          serverd.lab.example.com
          EOF
          # cat <<'EOF' >/home/ansible/ansible.cfg
          sudo tee /etc/ansible/ansible.cfg > /dev/null <<'EOF'
          [defaults]
          inventory=/etc/ansible/inventory
          remote_user = ansible
          ask_password = false
          [privilege_escalation]
          become=True
          become_method=sudo
          become_user=root
          become_ask_pass=False
          EOF
          echo "  Configured SSH Key-based authentication, /etc/hosts and hostnames,"
          echo "  inventory file and ansible.cfg."
          echo "  Inventory File:       /etc/ansible/inventory"
          echo "  Ansible Config File:  /etc/ansible/ansible.cfg"
          fi
# Define the Managed Nodes using Launch Templates
  AnsibleManagedNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: AnsibleControlNode
    Properties:
      LaunchTemplateName: AnsibleManagedNodeTemplate # Optional
      LaunchTemplateData:
        ImageId: "ami-0fe630eb857a6ec83"
        InstanceType: "t2.micro"
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Name: !Ref IAMInstanceProfileName
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false # Do not assign public IP
            Groups:
              - !GetAtt UTAansibleSG.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Install AWS CLI
            sudo dnf update -y
            sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
              -o "awscliv2.zip"
            sudo dnf install -y unzip
            sudo unzip awscliv2.zip
            sudo ./aws/install
            sudo export PATH=$PATH:/usr/local/bin
            aws --version
            # Install jq for parsing JSON data (if required)
            sudo dnf install -y jq
            # Install, Start and Enable Amazon SSM Agent (if using RHEL AMI)
            if [[ -n $(grep -i 'Red Hat Enterprise Linux' /etc/os-release) ]]; then
            dnf install -y https://s3.us-east-1.amazonaws.com/amazon-ssm-us-east-1/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable --now amazon-ssm-agent
            fi
            # create user ansible and enable ssh authentication with the existing key-pair
            if [[ -z $(getent passwd ansible) ]]; then
              sudo useradd ansible
              sudo mkdir /home/ansible/.ssh
              sudo cp /home/ec2-user/.ssh/authorized_keys\
                /home/ansible/.ssh/authorized_keys
              sudo chown -R ansible:ansible /home/ansible/.ssh
              sudo chmod 700 /home/ansible/.ssh
              sudo chmod 600 /home/ansible/.ssh/authorized_keys
              sudo echo "ansible ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/ansible
              # Retrieve the Ansible user's password from Amazon Secrets Manager
              # and assign it to the ansible user
              AnsibleUserPassword=$(aws secretsmanager get-secret-value \
                --secret-id ansible_user_password --query 'SecretString' \
                --output text | jq -r .ansible_user_password)
              sudo echo $AnsibleUserPassword | sudo passwd ansible --stdin
              # Copy the private key from Amazon Secrets Manager to ~ansible/id_rsa
              AnsiblePrivateKey=$(aws secretsmanager get-secret-value --secret-id \
              ansible_private_key --query 'SecretString' --output text)
              sudo echo $AnsiblePrivateKey | base64 --decode > /home/ansible/.ssh/id_rsa              
              sudo chmod 600 /home/ansible/.ssh/id_rsa
              sudo chown -R ansible:ansible /home/ansible/.ssh
            fi
  AnsibleManagedNodeAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref NumberOfManagedNodes
      MaxSize: !Ref NumberOfManagedNodes
      DesiredCapacity: !Ref NumberOfManagedNodes
      LaunchTemplate:
        LaunchTemplateId: !Ref AnsibleManagedNodeLaunchTemplate
        Version: !GetAtt AnsibleManagedNodeLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - Ref: UTAprivateA
        - Ref: UTAprivateB
        - Ref: UTAprivateC
      Tags:
        - Key: Name
          Value: server
          PropagateAtLaunch: true
        - Key: AliasName
          Value: server
          PropagateAtLaunch: true
        - Key: Type
          Value: "AnsibleNode"
          PropagateAtLaunch: true
